import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
	id 'org.springframework.boot' version '3.0.1'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
	id 'org.jetbrains.kotlin.jvm' version '1.8.22'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.8.22'
	id 'org.jetbrains.kotlin.plugin.jpa' version '1.8.22'
}

group = 'com.meokq'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	// logback과 log4j2간 충돌 방지
	all*.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	all*.exclude group: 'org.springframework.boot', module: 'logback-classic'

	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
	// Spring Boot Starter Dependencies
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
	implementation 'org.jetbrains.kotlin:kotlin-reflect'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'

	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// Spring Boot DevTools
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	// Database
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

	// Spring Boot Test Dependencies
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'org.mockito:mockito-core:5.2.0'

	// Springdoc OpenAPI
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

	// springfox dependencies for Swagger
	//implementation 'io.springfox:springfox-boot-starter:3.0.0'

	// Spring Boot Starter Validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// Spring Security and OAuth2
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'

	// jasypt
	implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.5'

	// JSON Web Token (JWT) library - jjwt
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// mysql
	runtimeOnly 'mysql:mysql-connector-java'
	implementation 'org.mariadb.jdbc:mariadb-java-client:2.4.0'
	implementation 'com.zaxxer:HikariCP:5.0.1'

	// S3
	implementation platform('software.amazon.awssdk:bom:2.20.56')
	implementation 'software.amazon.awssdk:s3'

	// log4j2
	implementation 'org.springframework.boot:spring-boot-starter-log4j2'
	implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16'

	// Spring Batch
	implementation 'org.springframework.boot:spring-boot-starter-batch'
	testImplementation 'org.springframework.batch:spring-batch-test'
}

tasks.withType(KotlinCompile) {
	kotlinOptions {
		freeCompilerArgs += '-Xjsr305=strict'
		jvmTarget = '17'
	}
}

tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

tasks.named('asciidoctor') {
	inputs.dir snippetsDir
	dependsOn test

	doLast {
		copy {
			from("build/docs/asciidoc")
			into("src/main/resources/static/docs")
		}
	}
}